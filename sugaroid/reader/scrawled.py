SCRAWLED = {
    "python-coverage-guide.md": (
        [
            "Measuring coverage of Python activities",
            "Measuring coverage during collaboration",
        ],
        [
            "Measuring coverage of Python activities",
            "python3-coverage",
            "sudo apt install python3-coverage\n",
            "python3-coverage run /usr/bin/sugar-activity3\n",
            "xdotool",
            "python3-coverage html\n",
            "python3 -m http.server &\n",
            "Tested on Ubuntu 18.04 and 19.04.",
            "See the Python Coverage documentation.",
            "Python Coverage",
            "Measuring coverage during collaboration",
            "When an activity is started to join a collaboration, there is little opportunity to intercept and add the command-line wrapper.",
            "/usr/bin/sugar-activity3 may be edited to add coverage API calls.  See Coverage.py API.",
            "/usr/bin/sugar-activity3",
            "Coverage.py API",
        ],
    ),
    "sugar-logging-in.md": (
        [
            "Guide to logging in with the Sugar desktop",
            "Some examples are shown below:",
            "See Also",
        ],
        [
            "Guide to logging in with the Sugar desktop",
            "You may have installed Sugar on Debian/Ubuntu, Fedora, any other distribution by following the Sugar documentation or may have installed the Sugar Live Build on a Virtual Machine.",
            "Each Linux distribution comes with a Display Manager.",
            "A Display Manager (DM) is essentially a graphical login program, that\nlets you switch users or switch desktop environments.",
            "The most popular display managers are GDM, LightDM, and SDDM.",
            "GDM",
            "LightDM",
            "SDDM",
            "GDM is used with the GNOME desktop environment on Debian, Ubuntu and Fedora.",
            "GDM",
            "LightDM is used with Raspbian on Raspberry Pi.",
            "LightDM",
            "SDDM is used with KDE.",
            "SDDM",
            "To log in with the Sugar Desktop, select Sugar at the login screen before logging in.  Depending on the display manager, you may have to select a gear icon, wrench icon or a dropdown menu to do this.",
            "gear icon",
            "wrench icon",
            "dropdown menu",
            "Some examples are shown below:",
            "GDM - Demonstrated on Sugar Live Build (Debian)",
            "Sugar",
            "gear",
            "",
            "LIGHTDM - Demonstrated on Sugar Live Build (Debian)",
            "Sugar",
            "gnome footprint icon",
            "",
            "GDM - Demonstrated on Ubuntu (Focal Fossa)",
            "Sugar",
            "gear icon",
            "",
            "SDDM - Demonstrated on Manjaro",
            "Sugar",
            "drop down",
            "",
            "See Also",
            "You can take a look at other Display Managers here (Debian Wiki) and here (Arch Wiki).",
            "here (Debian Wiki)",
            "here (Arch Wiki).",
            "https://gitlab.gnome.org/GNOME/gdm",
            "https://github.com/canonical/lightdm",
            "https://github.com/sddm/sddm",
        ],
    ),
    "memory-leaks.md": (
        [
            "Finding Memory Leaks",
            "1. Log the memory usage",
            "2. Graph the log",
            "Real World Example",
        ],
        [
            "Finding Memory Leaks",
            "This is a guide to finding and fixing memory leaks.",
            "Memory leaks are a common bug where a program retains allocated memory after it is no longer needed, and over time this makes the program slow (and even slows down the whole operating system.)",
            "To see if they are happening, you can log and graph the memory consumption of your Activity.",
            "1. Log the memory usage",
            "Start sugar, your Activity, then the Terminal Activity.",
            "In Terminal run htop, look for the pid of your Activity, and quit.",
            "htop",
            "pid",
            "Run a loop that measures the memory consumption of your Activity,",
            "while true; do\n  echo $(date +%s.%N) \\\n    $(awk '/VmSize/ { print $2; }' /proc/$(pgrep -f jarabe)/status)\n  sleep 1\ndone | tee memory.log\n",
            "Switch to your Activity, and follow some procedure to test it, then stop using it and wait a couple of minutes to let it settle down.",
            "Tip: Use xdotool to script the interaction with your activity, so you can reliably reproduce the testing procedure.\nFor example, xdotool key F6",
            "xdotool",
            "xdotool key F6",
            "Switch to Terminal and stop the loop by pressing CTRL-C",
            "CTRL-C",
            "2. Graph the log",
            "Create a graph of the data, either quickly with plotutils,",
            "graph -T png data > graph.png;\n",
            "or with gnuplot, run this script",
            '#!/bin/bash\ngnuplot -persist <<EOF\n# comment out the following 2 lines to display on screen\nset terminal png\nset output "memory.png"\n\nset title "XO-1.5 ... \\nVmSize leak test\\n2015-10-06\\nby James Cameron"\nset xlabel "Clock time MM:SS"\nset ylabel "VmSize kb"\nset nokey\n\nset xdata time\nset timefmt "%s"\n\nset grid\nset style data step\n\nplot "memory.log" using 1:2 title "run #1" lw 2\n',
            "The memory.png might look like this:",
            "memory.png",
            "",
            "Finally removes the files,",
            "rm data  graph.png memory.log memory.png;\n",
            "Real World Example",
            "A memory leak was found and discussed in the Sugar Desktop programs (jarabe), https://github.com/sugarlabs/sugar/pull/520, with a fix in https://github.com/sugarlabs/sugar/pull/614.\nThat discussions is the source for this guide.",
            "https://github.com/sugarlabs/sugar/pull/520",
            "https://github.com/sugarlabs/sugar/pull/614",
        ],
    ),
    "python-porting-guide.md": (
        [
            "Python 3 Porting Guide",
            "Required Skills",
            "How to Port an Activity to Python 3:",
            "Releasing Activities (for maintainers)",
            "Resources:",
            "Porting Examples:",
            "Common Questions",
            "Why does my traceback show Python 2?",
            'Why does "consider porting to Python 3" still appear?',
        ],
        [
            "Python 3 Porting Guide",
            "Guide to porting Sugar Activities to Python 3.",
            "Many activities were written in Python 2 with the PyGObject introspection library, GTK, GDK, GStreamer, and other dependencies.  Activities usually did not have test cases or test coverage.",
            "Required Skills",
            "How to Port an Activity to Python 3:",
            "Quiesce the activity source by making sure the activity works properly before porting, closing any solved issues, merging any pull requests or branches and releasing the last Python 2 version; see the activity maintainer checklist.",
            "activity maintainer checklist",
            "Check that a Python 3 port has not already been done; look for a python3 branch in the main repository, or any developer fork.",
            "For activities known to work with Fedora 18, create a fedora18 branch and push; this branch will be for any future maintenance with Python 2,",
            "Use Sugar Toolkit for GTK 3 version 0.115 or later, built for Python 3, and test that /usr/bin/python3 can import it, for example;",
            "/usr/bin/python3",
            "python3 -c 'import sugar3'\n",
            "Prepare a test plan to cover each feature and user interface widget, and consider assessing coverage,",
            "assessing coverage",
            "If the activity uses telepathy-python, test and fix collaboration, then port to PyGObject binding TelepathyGLib, and test again, for example;",
            "telepathy-python",
            "TelepathyGLib",
            "import telepathy\n",
            "should change to:",
            "from gi.repository import TelepathyGLib\n",
            "Use constants from TelepathyGLib, and minimise changes, for example;",
            "TelepathyGLib",
            "from telepathy.interfaces import CHANNEL\n",
            "should change to:",
            "CHANNEL = TelepathyGLib.IFACE_CHANNEL\n",
            "Replace calls to Channel and Connection classes of\ntelepathy-python with a dictionary of dbus.Interface().  Look\nthrough the source code for constants used by Channel and Connection\nobjects as keys.  Use these constants as keys to a dictionary of the\ndbus.Interface() objects.  For example;",
            "Channel",
            "Connection",
            "telepathy-python",
            "dbus.Interface()",
            "Channel",
            "Connection",
            "dbus.Interface()",
            "Channel(self._connection.requested_bus_name, channel_path,\n  ready_handler=self.__text_channel_ready_cb)\n",
            "should change to (ensure adding all key-interface pairs):",
            "self.text_channel = {}\nself.text_proxy = dbus.Bus().get_object(\n          self._connection.requested_bus_name, channel_path)\nself.text_channel[PROPERTIES_IFACE] = dbus.Interface(\n          self.text_proxy, PROPERTIES_IFACE)\n",
            "Replace all bare references to telepathy_text_chan and\ntelepathy_tubes_chan",
            "telepathy_text_chan",
            "telepathy_tubes_chan",
            "self.telepathy_text_chan.AddMembers(\n",
            "should change to:",
            "self.telepathy_text_chan[CHANNEL].AddMembers(\n",
            "Test and fix collaboration before proceeding further.",
            "If the activity uses dbus.gobject_service.ExportedGObject (deprecated and only available for Python 2), then port to CollabWrapper, and test again,",
            "dbus.gobject_service.ExportedGObject",
            "CollabWrapper",
            "If the activity uses dbus directly, refer to dbus-python Porting to Python 3, and test again,",
            "dbus",
            "dbus-python Porting to Python 3",
            "Port from Python 2 to Python 3.\nStart your porting with 2to3 tool,\nIn the terminal, type:",
            "2to3",
            "2to3 -w -n *.py\n",
            "and then review every change made,",
            "Iterate through How to Port Python 2 code to Python 3 | Python Docs, and Supporting Python 3: An in-depth guide changing code,",
            "How to Port Python 2 code to Python 3 | Python Docs",
            "Supporting Python 3: An in-depth guide",
            "Check for integer divisions that have become floating point,",
            "Check for use of binary data, especially in files, pipes, and subprocesses,",
            'Check for use of Gtk.CssProvider, and if so ensure the load_from_data function is given bytes rather than unicode strings, e.g. `b"...",',
            "Check for use of Rsvp.new_from_data for making images from SVG data, and if so ensure the function is given bytes rather than unicode strings,",
            "Change exec value in activity.info from sugar-activity to sugar-activity3",
            "exec",
            "activity.info",
            "sugar-activity",
            "sugar-activity3",
            "Make Sugar Home View reload the bundle; by restarting Sugar or moving the bundle directory out of ~/Activities and back again a few seconds later,",
            "~/Activities",
            "Test the activity from Sugar, that it starts without error, that no warnings or errors are in logs, and that each user function works as before,",
            "Check if the activity can be built,\nIn the terminal, type:",
            "python3 setup.py dist_xo\n",
            "Follow the Code Guidelines during all porting.",
            "Code Guidelines",
            "Write any comments in the code, by adding # README:, # TODO: and # FIXME: explaining what are the problems that you are having with that chunk of code. Put a link if it's necessary.",
            "Releasing Activities (for maintainers)",
            "Once an activity is ported, a new release can be made. The major version\nshould be greater than the existing one.",
            "Please follow\nthis\nguide for releasing a new version.",
            "this",
            "Avoid releasing Python 3 activities to https://activities.sugarlabs.org/ as these will not work on existing systems.",
            "Resources:",
            "What's new in Python 3 | Python Docs",
            "How to Port Python 2 code to Python 3 | Python Docs",
            "2to3 Documentation",
            "Porting Examples:",
            "Here are some examples of porting activities to Python 3:",
            "Spirolaterals",
            "Finance",
            "Abacus",
            "Write",
            "Log",
            "CowBulls",
            "Common Questions",
            "Why does my traceback show Python 2?",
            "Check that you have changed exec in activity.info, and that Sugar has been restarted.",
            "exec",
            "activity.info",
            'Why does "consider porting to Python 3" still appear?',
            "Check that you have changed exec in activity.info.",
            "exec",
            "activity.info",
        ],
    ),
    "fedora.md": (
        [
            "Using Sugar on Fedora",
            "Using Sugar as a Desktop Environment",
            "Using Sugar with another Desktop Environment",
        ],
        [
            "Using Sugar on Fedora",
            "Fedora is an operating system based on the Linux kernel, developed by the community-supported Fedora Project and sponsored by Red Hat. -- wikipedia.org",
            "wikipedia.org",
            "In relation to Sugar, Fedora is a downstream distribution project that can be used to run Sugar.",
            "Using Sugar as a Desktop Environment",
            "Install Fedora. Then, in a Terminal, type:",
            "sudo dnf groupinstall sugar-desktop\n",
            "Then restart your computer. At the Sign in select the Sugar desktop.",
            "Using Sugar with another Desktop Environment",
            "Select the GNOME on Xorg or GNOME Classic desktop, then in a Terminal, type:",
            "sudo dnf groupinstall sugar-desktop\nsudo dnf install sugar-runner\nsugar-runner\n",
            "Sugar will start. Logout from Sugar to return to the desktop environment you were previously using.",
            "Sugar is also available from Activities search in GNOME.",
        ],
    ),
    "web-style.md": (
        [
            "Code style for Sugar HTML development",
            "General",
            "HTML",
            "CSS",
            "JavaScript",
            "Tools",
            "RECESS",
            "Karma",
        ],
        [
            "Code style for Sugar HTML development",
            "General",
            "Avoid lines longer than 80 characters.",
            'Don\'t use any form of minification (neither in JS, HTML or CSS).\nAll our source should be readable using the Sugar "View Source"\nfeature.',
            "HTML",
            "The js-beautify tool can be handy for indenting HTML as well.",
            "CSS",
            "Use two spaces for indentation.",
            "Make it compliant with RECESS. See explanation below.",
            "See explanation below",
            "JavaScript",
            "here",
            "Tools",
            "RECESS",
            "RECESS https://github.com/twitter/recess keeps the order of CSS\nrules following a convention, and protects us from different mistakes.\nThe recess command is provided by sugar-build.",
            "https://github.com/twitter/recess",
            "To check CSS or LESS code:",
            "recess css/activity.css -noIDs false -noOverqualifying false\n",
            "Karma",
            "If you are hacking on sugar-web, run the testsuit with the karma command inside a osbuild shell:",
            "karma start sugar-web/test/karma.conf.js\n",
            "We encourage writing new unit tests for new features.",
            "After you do the changes, run:",
            "check\n",
            "It will run all the code checks and the unit tests making sure you won't break the build when your changes are pushed.\nIf a test doesn't pass either your code needs to be fixed or the test need to be adapted.",
        ],
    ),
    "development-environment.md": (
        [
            "Setup a development environment",
            "Sugar Live Build",
            "Packaged Sugar",
            "Native Sugar",
            "Change Debugging Level",
        ],
        [
            "Setup a development environment",
            "Sugar is made of several modules and depends on many other libraries.",
            "There are several ways to set up a Sugar environment for doing Sugar development, choose one at a time only;",
            "for testing or changing Sugar or a Sugar activity, install a live build, which has all dependencies and source code included, but is nearly 1GB of downloads;",
            "live build",
            "for writing or changing a Sugar activity, install a packaged Sugar environment, which will install dependencies automatically; or,",
            "packaged Sugar environment",
            "for packaging Sugar, downstream developers create a native Sugar build and install the necessary dependencies by hand, but Sugar is difficult to remove.",
            "native Sugar build",
            "Sugar Live Build",
            "Sugar Live Build is a complete bootable image containing Sugar, the toolkits, and the demonstration activities;",
            "can be booted from hard drive, flash drive, and optical media, automatically starting Sugar without persistence,",
            "can be installed as a virtual machine, with persistence and password protection,",
            "contains all build dependencies, configured source trees (git clones in /usr/src), and binaries (make install) for Sugar modules and the demonstration activity set.",
            "/usr/src",
            "make install",
            "See downloads for the ISO9660 image file.",
            "downloads",
            "Once installed, Sugar Live Build can be used to make changes to Sugar, the toolkits, the demonstration activities, or to write new activities.",
            "changes to Sugar or the toolkits can be done by editing files in the module source trees in /usr/src, followed by sudo make install for each changed module.",
            "/usr/src",
            "sudo make install",
            "changes to demonstration activities can be done in the activity source trees in /usr/src/sugar-activities, and are immediately effective; just start a new instance of the activity in Sugar.",
            "/usr/src/sugar-activities",
            "writing new activities can be done in the ~/Activities/ directory, and the new activity can be started using sugar-activity3 command in Terminal, or by restarting Sugar so that the new activity/activity.info file is read to regenerate the Home View.",
            "~/Activities/",
            "sugar-activity3",
            "activity/activity.info",
            "Home View",
            "See sugar-live-build on GitHub for configuration files to make your own Sugar Live Build using the Debian Live Build software.",
            "sugar-live-build",
            "Packaged Sugar",
            "For development of activities without making changes to Sugar desktop.",
            "For Fedora users, see Using Sugar on Fedora. Once Sugar is installed, development of activities can begin.",
            "Using Sugar on Fedora",
            "For Debian users, see also Using Sugar on Debian, or see how to install sucrose below.",
            "Using Sugar on Debian",
            "sucrose",
            "For Ubuntu users, see also Using Sugar on Ubuntu, or see how to install sucrose below.",
            "Using Sugar on Ubuntu",
            "sucrose",
            "Install the sucrose package;",
            "sucrose",
            "sudo apt install sucrose\n",
            "Log out, then log in with the Sugar desktop selected.",
            "Once Sugar is installed, development of activities can begin.",
            "Native Sugar",
            "For experts.",
            "Clone each of the module repositories;",
            "for module in sugar{-datastore,-artwork,-toolkit,-toolkit-gtk3,}; do\n    git clone https://github.com/sugarlabs/$module.git\ndone\n",
            "Install the build dependencies. There are many, and their package\nnames vary by distribution. A first start is in the Debian or Fedora\npackaging files. From 0.113, add Six.",
            "On Debian or Ubuntu, ensure deb-src lines are present and enabled in /etc/apt/sources.list, and then;",
            "deb-src",
            "/etc/apt/sources.list",
            "sudo apt update\nfor module in sugar{-datastore,-artwork,-toolkit,-toolkit-gtk3,}; do\n    sudo apt build-dep $module\ndone\nsudo apt install python{,3}-six python3-empy\n",
            "On Fedora, use dnf builddep, like this;",
            "dnf builddep",
            "for module in sugar{-datastore,-artwork,-toolkit,-toolkit-gtk3,}; do\n    sudo dnf builddep $module\ndone\nsudo dnf install python{2,3}-six python3-empy\n",
            "Autogen, configure, make, and install modules for Python 2;",
            "for module in sugar{-toolkit,-toolkit-gtk3}; do\n    cd $module\n    ./autogen.sh --with-python2\n    make\n    sudo make install\n    cd ..\ndone\n",
            "Autogen, configure, make, and install modules for Python 3;",
            "for module in sugar{-artwork,-toolkit-gtk3,-datastore,}; do\n    cd $module\n    ./autogen.sh --with-python3\n    make\n    sudo make install\n    cd ..\ndone\n",
            "On Debian or Ubuntu, try python3 -c 'import sugar3' if fails move the sugar3 directory from /usr/local/lib/python3.6/site-packages/ to /usr/local/lib/python3.6/dist-packages/.",
            "python3 -c 'import sugar3'",
            "sugar3",
            "/usr/local/lib/python3.6/site-packages/",
            "/usr/local/lib/python3.6/dist-packages/",
            "On Fedora, add /usr/local/lib/python2.7/site-packages/ to sys.path for any Python 2 programs, especially /usr/local/bin/sugar;",
            "/usr/local/lib/python2.7/site-packages/",
            "sys.path",
            "/usr/local/bin/sugar",
            "export PYTHONPATH=/usr/local/lib/python2.7/site-packages\nexport GI_TYPELIB_PATH=/usr/local/lib/girepository-1.0\nexport LD_LIBRARY_PATH=/usr/local/lib:$LD_LIBRARY_PATH\n",
            "Install the run-time dependencies. There are many, and their package\nnames vary by distribution. A first start is in the Debian or Fedora\npackaging files.",
            "On Debian or Ubuntu, install the Sugar packages;",
            "sudo apt install sucrose\n",
            "On Fedora, use dnf deplist and filter by architecture;",
            "dnf deplist",
            "for module in sugar{-datastore,-artwork,-toolkit,-toolkit-gtk3,}; do\n    echo\n    echo $module\n    sudo dnf deplist $module | \\\n        awk '/provider:/ {print $2}' | \\\n        grep -v i686 | \\\n        sort -u | sudo xargs dnf -y install\ndone\n",
            "Add the PolicyKit files to the system-wide directory;",
            "sudo ln -sf /usr/local/share/polkit-1/actions/org.sugar.* \\\n    /usr/share/polkit-1/actions/\n",
            "Sugar is now installed in /usr/local.  Remove any Sugar or Toolkit packages you installed from Fedora or Debian, otherwise then you start Sugar the packaged files in /usr/ will be run.",
            "/usr/local",
            "/usr/",
            "Clone the Browse and Terminal activities;",
            "mkdir -p ~/Activities\ncd ~/Activities\ngit clone https://github.com/sugarlabs/browse-activity.git Browse.activity\ngit clone https://github.com/sugarlabs/terminal-activity.git Terminal.activity\n",
            "Log out and log in again with the Sugar desktop selected, or use the remote desktop feature described earlier on this page.",
            "After making changes in a Sugar module, repeat the sudo make install step, and log in again.",
            "sudo make install",
            "Change Debugging Level",
            "You can enable debugging in Sugar by uncommenting the line",
            "#export SUGAR_LOGGER_LEVEL=debug\n",
            "present in  ~/.sugar/default/debug\nThe debug file also allows the enabling of debugging for other parts of the stack, such as collaboration.",
            "~/.sugar/default/debug",
        ],
    ),
    "web-activity.md": (
        [
            "Write your own Sugar web activity",
            "Choose your development environment",
            "Create the activity from the template",
            "Customize",
            "File structure",
            "Revision control your code",
            "First steps",
            "Adding a button to the toolbar",
            "Adding HTML content dynamically",
            "Debugging",
            "Keeping Sugar libraries up to date",
            "Using other JavaScript libraries",
            "AMD-ready",
            "non-AMD libs",
            "Ready to release",
        ],
        [
            "Write your own Sugar web activity",
            "Choose your development environment",
            "You've got three choices to develop your own web activity for Sugar:",
            "See Setup a development environment for more detail.",
            "Setup a development environment",
            "Sugarizer simulates the Sugar environment in a browser. So you need\nonly a browser to start developing. It's the better choice if you've\nno time or knowledge to learn how to install or build Sugar desktop\non a GNU Linux distribution but you're not in a Sugar desktop\nenvironment, so your activity may only work in Sugarizer.",
            "Create the activity from the template",
            "On packaged sugar, after you have built the development\nenvironment, clone the Sugarizer repository.\nInstall volo through npm.",
            "Sugarizer repository",
            "npm install -g volo\n",
            "Create an activity based on the default template",
            "cd sugarizer/activities\nvolo create MyActivity.activity ./ActivityTemplate\ncd MyActivity.activity\n",
            "On Sugarizer, after you've cloned - or copied - the Sugarizer\nrepository, copy all content of\nactivities/ActivityTemplate directory in a new directory\nactivities/MyActivity.activity.",
            "Sugarizer\nrepository",
            "activities/ActivityTemplate",
            "activities/MyActivity.activity",
            "Customize",
            "Choose a name for your activity.  Write it in the activity name and\nbundle-id in activity/activity.info of the new directory.",
            "activity/activity.info",
            "",
            "And also in the title tag of index.html.",
            "index.html",
            "",
            "On packaged sugar, install the activity for development",
            "python setup.py dev\n",
            "On Sugarizer, update the file activities.json of the Sugarizer directory: add a new line for your activity. Update id, name and directory values on this new line.",
            "activities.json",
            "",
            "Now you should have a basic activity running!",
            "",
            "File structure",
            "In your new activity, you will find the following file structure:",
            "MyActivity.activity/\n|-- activity/\n|   |-- activity.info\n|   `-- activity-icon.svg\n|-- index.html\n|-- css/\n|   `-- activity.css\n|-- js/\n|   |-- activity.js\n|   `-- loader.js\n|-- lib/\n|-- package.json\n`-- setup.py\n",
            "activity/ contains information about your activity, including the\nname, ID, and the icon.",
            "activity/",
            "index.html is where the elements that compose your activity are\ndefined.  The template comes with a toolbar and a canvas where you\ncan place your content.",
            "index.html",
            "js/activity.js is where the logic of your activity lives.",
            "js/activity.js",
            "css/activity.css is where you add the styling of your activity.",
            "css/activity.css",
            "Those are the files you'll modify in most cases. The others are:",
            "js/loader.js configures the libraries paths and loads your\njs/activity.js . You can add non-AMD libraries here.",
            "js/loader.js",
            "js/activity.js",
            "non-AMD libraries",
            "lib/ contains the libraries",
            "lib/",
            "package.json contains information about the libraries the activity\ndepends",
            "package.json",
            "setup.py lets you install your activity or make an installable\nbundle with it",
            "setup.py",
            "Now you are ready to go ahead and develop your activity in the html,\njs and css directories.",
            "Revision control your code",
            "For development you can initialize the repository as a git\nrepository. This will help you to track your changes. First use git\ninit\nto initialize the repository:",
            "git\ninit",
            "git init\n",
            "With git\nstatus\nyou can show the available files in the folder they are still\nuntracked. Now add all the files in the directory besides the lib\nfolder and commit those changes, you can use git status again to see\nthe current state:",
            "git\nstatus",
            "git add .\ngit commit -a -m 'Initial import'\ngit status\n",
            "First steps",
            "Adding a button to the toolbar",
            "This simple example will show you how web activities are structured as\nbits of HTML, CSS and JavaScript.",
            "You will need a SVG graphic for the button.  Or you can use one from\nthe Sugar icon set at lib/sugar-web/graphics/icons/.  For this\nexample, let's say you have one custom icon called my-button.svg.\nCreate a directory icons/ inside your activity and place the SVG\nfile inside.  Then do the following steps.",
            "lib/sugar-web/graphics/icons/",
            "my-button.svg",
            "icons/",
            "In index.html, add a new <button> element inside the toolbar:",
            "index.html",
            '<button class="toolbutton" id="my-button" title="My Button"></button>\n',
            "In css/activity.css, define the button style:",
            "css/activity.css",
            "#main-toolbar #my-button {\n    background-image: url(../icons/my-button.svg);\n}\n",
            "In js/activity.js, add a callback for the button:",
            "js/activity.js",
            'var myButton = document.getElementById("my-button");\nmyButton.onclick = function () {\n    console.log("You clicked me!");\n}\n',
            "Adding HTML content dynamically",
            "Soon you will find that adding content to the HTML as we did with the\ntoolbar button in the previous section, is very limited.  You'll want\nto add HTML elements on the fly, as the user interacts with the\nactivity, or as the data structures of your activity logic change.\nThere are several options to archive this.  Most of the time you'll\nend using a mix of them, so is important to know them all.",
            'First, it is possible to create HTML elements and append them to other\nHTML elements using JavaScript.  This is called "manipulating the\nDOM".',
            "For example, to create a new div with class 'my-div', and append it to\nthe canvas div, you can do:",
            'myElem = document.createElement(\'div\');\nmyElem.className = "my-div";\nvar canvas = document.getElementById("canvas");\ncanvas.appendChild(myElem);\n',
            "But it is a pain to do that for large HTML structures.  Writing HTML\ndirectly is much better:",
            "var canvas = document.getElementById(\"canvas\");\ncanvas.innerHTML +=\n    '<ul id=\"names-list\">' +\n      '<li class=\"name\">Tom</li>' +\n      '<li class=\"name\">Chris</li>' +\n      '<li class=\"name\">Donald</li>' +\n    '</ul>';\n",
            "Nice, that saves us many JavaScript lines.  But what if the HTML\ndepends on your data?  Let's say you have an array of names and you\nwant one <li> per name, as in the previous example.  You have\ntwo options: 1. go back to use the JavaScript methods for DOM\nmanipulation, or 2. use a template system.",
            "There are many template systems out there, and you can use whatever\nyou like.  Let's try mustache here.",
            "mustache",
            "Add mustache to your activity:",
            "volo add mustache\n",
            "Import mustache in your js/activity.js:",
            "js/activity.js",
            'var mustache = require("mustache");\n',
            "Use it:",
            'var template =\n    \'<ul id="names-list">\' +\n      \'{{#names}}\' +\n      \'<li class="name">{{ name }}</li>\' +\n      \'{{/names}}\' +\n    \'</ul>\';\n\nvar data = {names: [{name: "Laura"}, {name: "Joao"},\n                    {name: "Willy"}, {name: "Sandra"}]};\n\nvar containerElem = document.getElementById("container");\ncontainerElem.innerHTML = mustache.render(template, data);\n',
            "Debugging",
            "If you want to inspect the code, you can press ctrl+shift+I while your\nActivity is running.",
            "The inspector is a very useful tool for many things. For example, you\ncan edit the activity CSS or HTML, and interactively see how it is\naffected. Or you can execute JavaScript commands in the console.",
            "",
            "It has also more advanced tools for JavaScript debugging. They are\nnicely documented here:\nhttps://developers.google.com/chrome-developer-tools/docs/javascript-debugging.",
            "https://developers.google.com/chrome-developer-tools/docs/javascript-debugging",
            "Keeping Sugar libraries up to date",
            "The activity depends on the\nsugar-web library\nthat provides the Sugar API and the Sugar look & feel.",
            "sugar-web",
            "This means that if there are changes to the library you have to update\nyour local copy. You can do this with running\nthe following command inside the activity directory:",
            "volo add -f\n",
            "Using other JavaScript libraries",
            "AMD-ready",
            "You can easily add AMD-ready libraries with volo.  For example, to add\nRaphaelJS:",
            "RaphaelJS",
            "$ volo add DmitryBaranovskiy/raphael\nDownloading: https://codeload.github.com/DmitryBaranovskiy/raphael/legacy.zip/v2.1.2\nInstalled github:DmitryBaranovskiy/raphael/v2.1.2 at lib/raphael.js\nAMD dependency name: raphael\n",
            "Then in js/activity.js you can use it:",
            "js/activity.js",
            'var raphael = require("raphael");\n',
            "non-AMD libs",
            "Please, refer to\nRequiresJS shim section,\nthen you can add your shim section in js/loader.js",
            "shim section",
            "js/loader.js",
            "Ready to release",
            "Before your first release, you should:",
            "After that, if the activity works with Sugar 0.112 or earlier, on\npackaged-sugar you may make a bundle and upload it to the Sugar\nActivity Library http://activities.sugarlabs.org/.",
            "http://activities.sugarlabs.org/",
            "python setup.py dist_xo\n",
            "With Sugarizer, you can directly publish the XO bundle. So, just zip the content of your activities/MyActivity.activity directory and rename the .zip file to a .xo file.",
            "activities/MyActivity.activity",
            ".zip",
            ".xo",
            "For further releases, you should update the activity_version in\nactivity/activity.info.",
            "activity/activity.info",
        ],
    ),
    "what-can-i-do.md": (
        ["Page Moved"],
        [
            "Page Moved",
            "Sorry, we moved this page to How can I help?.",
            "How can I help?",
        ],
    ),
    "docs.md": (
        ["Improving this documentation", "Contributing images"],
        [
            "Improving this documentation",
            "Have you found an error in these docs, or want to improve them?\nPlease contact us or directly send pull requests to\nthe GitHub repository.",
            "contact us",
            "GitHub repository",
            "This documentation lives in https://github.com/sugarlabs/sugar-docs",
            "https://github.com/sugarlabs/sugar-docs",
            "Contributing images",
            "Make them 600px width, or less.",
            "You may need to highlight parts of the image.  Use color yellow (rgb\n255, 255, 0) at 30% opacity, in a layer with Multiply mode, over the\nscreenshot layer.",
            "Code screenshots: use gedit and default GNOME theme to make them.",
        ],
    ),
    "README.md": (
        [
            "Sugar Labs",
            "Getting started",
            "Design",
            "Sugar Desktop",
            "Sugar Web",
            "Sugar Android",
            "Documentation",
        ],
        [
            "Sugar Labs",
            "Welcome to documentation for contributors and developers.",
            "Getting started",
            "Code of Conduct",
            "How can I help?",
            "Contribute code",
            "Programming Languages",
            "Contact",
            "Design",
            "Human Interface Guidelines",
            "Sugar Iconify",
            "Sugar Desktop",
            "Setup a development environment",
            "Write your own Sugar desktop activity",
            "Python code style",
            "Memory leaks",
            "GTK 3 Porting Guide",
            "Python 3 Porting Guide",
            "Python Coverage Guide",
            "Sugar Web",
            "Write your own Sugar web activity",
            "Architecture",
            "JavaScript style",
            "Web code style",
            "Components showcase",
            "Sugar Android",
            "Sugarizer",
            "Web activity",
            "Documentation",
            "Improving this documentation",
        ],
    ),
    "sugar-iconify.md": (
        [
            "Sugar Iconify",
            "Description",
            "Usage",
            "Details",
            "Instantiating SugarIconify",
            "Methods",
            "#set_stroke_color():",
            "#set_fill_color():",
            "#set_confirm_guess():",
            "#set_use_default_colors():",
            "#set_overwrite_input():",
            "#set_output_path():",
            "#set_use_entity():",
            "#set_verbose():",
            "#set_pattern():",
            "#set_multiple():",
            "#set_output_examples():It is equivalent of -x on command line,",
            "#set_use_iso_strokes():",
            "Example",
        ],
        [
            "Sugar Iconify",
            "Description",
            "Sugar uses entities for its SVG colors in order to match the icon\ncolors to the user colors.",
            "The sugariconify.py script is used to convert SVGs into the format\nrequired for Sugar icons, adding the necessary stroke and fill\nentities. This is a Python script, and as such requires Python to run.\nIt will create Sugar-compatible SVG icons from an input.svg by\nadding the appropriate stroke and fill entities. It can be used to\nconvert a single icon or run over a batch of icons at one time.",
            "input.svg",
            "You can find the script in the sugariconify repository.  You can find a web version at https://github.com/sugarlabs/iconify-web",
            "sugariconify repository",
            "For creating an SVG suitable for Sugar,\nsee the tutorial on Making Sugar\nIcons.",
            "Making Sugar\nIcons",
            "In some cases, you may desire to update a single icon, or a subset of\nthe icons defined within a given SVG. To do so, pass a pattern to the\nscript with -p, and only those icons which match the pattern will be\nexported.",
            "Usage",
            "sugariconify.py [-ceghipv] [-s stroke_hex] [-f fill_hex] [-m | -o ] [-d directory] input.svg\n",
            "Example usage:",
            "python sugariconify.py input.svg\n",
            "Options",
            '   -c    Apply default color entities (#666666, #FFFFFF) to output \n   -d    [directory] The preferred output directory \n   -e    Do not insert entities for strokes and fills \n   -f    [hex] Hex value to replace with fill entity \n   -g    Automatically accept guesses for stroke and fill entities \n   -h    Display this help message \n   -i    Insert "isolated stroke" entities \n   -m    Multiple export; export top level groups as separate icons \n   -o    Modify input file in place, overwriting it; overridden by -m \n   -p    [pattern] Only export icons whose name contains pattern \n   -s    [hex] Hex value to replace with stroke entity \n   -v    Verbose \n   -x    Create HTML preview files, for icon validation \n',
            "Note: A common problem encountered when using this script is when the\ntarget SVG has more than two colors.",
            "Details",
            "Given a simple input SVG:",
            '<?xml version="1.0" encoding="UTF-8" standalone="no"?>\n<svg\n   xmlns:dc="http://purl.org/dc/elements/1.1/"\n   xmlns:cc="http://creativecommons.org/ns#"\n   xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"\n   xmlns:svg="http://www.w3.org/2000/svg"\n   xmlns="http://www.w3.org/2000/svg"\n   version="1.1"\n   viewBox="0 0 55 55"\n   height="55mm"\n   width="55mm">\n  <rect\n      y="2.5"\n      x="2.5"\n      height="50"\n      width="50"\n      style="fill:#ffff00;fill-opacity:1;stroke:#ff0000;stroke-width:3.5;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1" />\n</svg>\n',
            "The resulting output would look like this:",
            '<?xml version="1.0" encoding="UTF-8" standalone="no"?>\n<!DOCTYPE svg  PUBLIC \'-//W3C//DTD SVG 1.1//EN\'\n          \'http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\' [\n        <!ENTITY stroke_color "#666666">\n        <!ENTITY fill_color "#ffffff">\n]>\n<svg\n   xmlns:dc="http://purl.org/dc/elements/1.1/"\n   xmlns:cc="http://creativecommons.org/ns#"\n   xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"\n   xmlns:svg="http://www.w3.org/2000/svg"\n   xmlns="http://www.w3.org/2000/svg"\n   version="1.1"\n   viewBox="0 0 55 55"\n   height="55mm"\n   width="55mm">\n     <rect\n  <rect\n      y="2.5"\n      x="2.5"\n      height="50"\n      width="50"\n      style="fill:&fill_color;;fill-opacity:1;stroke:&stroke_color;;stroke-width:3.5;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1"/>\n</svg>\n',
            "Instantiating SugarIconify",
            "It is also possible to use SugarIconify in your own Python scripts.",
            "   from sugariconify import SugarIconify\n   icon = SugarIconify()\n",
            "Methods",
            "#set_stroke_color():",
            "It is equivalent of -s on command line, it can be a hex value\n(e.g #FFFF00) or a rgb percent value such as rgb(31%, 28%, 56%).",
            "   icon.set_stroke_color('#FFFF00')\n   icon.set_stroke_color('rgb(55%, 12%, 55%)')\n",
            "#set_fill_color():",
            "It is equivalent of -f on command line, it can be a hex value\n(e.g #FF0000) or a rgb percent value such as rgb(32%, 33%, 87%).",
            "   icon.set_fill_color('#FFFFFF')\n   icon.set_fill_color('rgb(55%, 12%, 55%)')\n",
            "#set_confirm_guess():",
            "It is equivalent of -g on command line, so it can automatically\naccept guesses for stroke and fill entities, True or False are\nthe only accepted values.",
            "   icon.set_confirm_guess(True)\n",
            "#set_use_default_colors():",
            "It is equivalent of -c on command line, uses default stroke and\nfill entities (#666666, #FFFFFF) for sugar iconify, True or False\nare the only accepted values.",
            "   icon.set_use_default_colors(True)\n",
            "#set_overwrite_input():",
            "It is equivalent of -o on command line, overrides input file in\nplace, True or False are the only accepted values.",
            "   icon.set_overwrite_input(True)\n",
            "#set_output_path():",
            "It is equivalent of -d on command line, sets the output path where\nthe iconified file will be placed, string values are accepted.",
            "   icon.set_output_path('/home/user/Desktop')\n",
            "#set_use_entity():",
            "It is  equivalent of -e on command line, do not insert entities for\nstrokes and fills, True or False are the only accepted values.",
            "   icon.set_use_entity(True)\n",
            "#set_verbose():",
            "It is equivalent of -v on command line, outputs information messages\non console, True or False are the only accepted values.",
            "   icon.set_verbose(True)\n",
            "#set_pattern():",
            "It is equivalent of -p on command line, only export icons whose name\ncontains pattern, string values are accepted.",
            "   icon.set_pattern('pattern')\n",
            "#set_multiple():",
            "It is  equivalent of -m on command line, export top level groups as\nseparate icons, True or False are the only accepted values.",
            "   icon.set_multiple(True)\n",
            "#set_output_examples():It is equivalent of -x on command line,",
            "create HTML preview files, for icon validation, True or False are\nthe only accepted values.",
            "   icon.set_output_examples(True)\n",
            "#set_use_iso_strokes():",
            'It is equivalent of -i on command line, insert "isolated stroke"\nentities, True or False are the only accepted values.',
            "   icon.set_use_iso_strokes(True)\n",
            "Example",
            "   from sugariconify import SugarIconify\n   icon = SugarIconify()\n   icon.set_use_default_colors(True)\n   icon.iconify('/home/user/Desktop/image.svg')\n",
        ],
    ),
    "how-can-i-help.md": (
        [
            "How Can I Help?",
            "Table Of Contents",
            " Prepare",
            "Music Blocks",
            "Sugarizer",
            "Sugar Desktop",
            " Coding, Documentation and Quality Assurance",
            " Design",
            " Marketing/Outreach",
            " Important Sugar Labs Links",
            "I'm Stuck!",
        ],
        [
            "How Can I Help?",
            "Table Of Contents",
            "Prepare",
            "Coding/Documentation/Quality Assurance",
            "Design",
            "Marketing/Outreach",
            "Important Links",
            "I'm Stuck!",
            " Prepare",
            "",
            "Before contributing to Sugar Labs, you should use Music Blocks, Sugarizer or Sugar Desktop.",
            "Music Blocks",
            "Music Blocks",
            "Music Blocks",
            "Sugarizer",
            "Sugarizer",
            "Sugarizer",
            "Sugarizer",
            "Sugarizer",
            "Complete the activity development tutorial",
            "Sugar Desktop",
            "Sugar Live Build",
            "Sugar on a Stick",
            "Ubuntu",
            "Fedora",
            "Debian",
            "Ubuntu",
            "Fedora",
            "Debian",
            "Sugar Live Build",
            "Sugar on a Stick",
            "Ubuntu",
            "Fedora",
            "Debian",
            "Help",
            "Setup a development environment",
            " Coding, Documentation and Quality Assurance",
            "",
            "Coding, documentation and quality assurance is important - it is required everywhere from producing new software, rolling out new features, maintaining and upgrading current releases, distributing instructions for others to know how to operate the software, and ensuring that others can use software without any problem.",
            "Projects Tab",
            "Google Summer Of Code",
            "Google Code-In",
            "Release Engineer's Feature Tracking page",
            "Wiki",
            "sugar-devel@lists.laptop.org",
            "Wiki",
            "Help Activity",
            "Help",
            "developer documentation",
            "www.sugarlabs.org",
            "www-sugarlabs",
            "desktop activity",
            "web activity",
            "guide",
            "guide",
            "guide",
            " Design",
            "",
            "Design is also crucial to Sugar Labs - it is where new ideas and initiatives are formed into proper reports which can be worked on. You can either contribute a new design proposal or implement an existing one in the Design Team User Experience Proposals wiki page.",
            "Design Team User Experience Proposals wiki page",
            " Marketing/Outreach",
            "",
            "You can help to increase the number of Sugar Labs users through -",
            "Translation Team",
            "translate.sugarlabs.org",
            " Important Sugar Labs Links",
            "",
            "The links listed below are of important Sugar Labs code repositories, wiki and website. Some of the code repositories are based under the Sugar Labs GitHub Organisation, while others are not.",
            "Github Organisation Page",
            "Sugar Labs",
            "GitHub Repositories Under Sugar Labs",
            "Sugar Shell for GTK+ 3",
            "Sugar Toolkit for GTK+ 2",
            "Sugar Toolkit for GTK+ 3",
            "Sugar Build/Development Scripts",
            "Sugar Artwork",
            "Sugar Labs Documentation",
            "Sugar Labs Website",
            "TurtleBlocksJS",
            "MusicBlocks",
            "Help Activity",
            "GitHub Repositories Not Under Sugar Labs",
            "Sugarizer",
            "Other Relevant Links",
            "Sugar Labs Website",
            "Sugar Labs Wiki",
            "Sugar Labs IRC",
            "I'm Stuck!",
            "",
            "Well, don't worry; there are real people here who will try to help you. Some\nways to get in touch with real people are:",
            "Hang out on the IRC",
            "Send an email on the mailing list",
        ],
    ),
    "languages.md": (
        [
            "Sugar Labs Programming Languages",
            "Python, PyGObject, GTK+, Pygame, GStreamer,",
            "JavaScript, HTML5 and CSS",
            "C",
            "PHP",
            "C#",
            "SmallTalk, Squeak",
            "Shell",
            "Anything New",
        ],
        [
            "Sugar Labs Programming Languages",
            "At Sugar Labs we have opportunities for contributing with many\ndifferent programming languages and libraries;",
            "Python, PyGObject, GTK+, Pygame, GStreamer,",
            "JavaScript, HTML5 and CSS",
            "C",
            "PHP",
            "C#",
            "SmallTalk, Squeak",
            "Shell",
            "Anything New",
        ],
    ),
    "web-architecture.md": (
        [
            "Sugar web architecture",
            "Web Activities",
            "Sugar Web library",
            "Sugar Services",
            "Web activities on Sugar GTK",
            "Web activities on Android",
            "Web activities standalone",
            "Tools",
        ],
        [
            "Sugar web architecture",
            "Web Activities",
            'A sugar web activity is an activity developed using the standard web\ntechnologies: HTML,\nJavaScript\nand CSS. They are called "web" because\nof the technology used but they run off-line just fine. The activities\nare run within the Sugar Shell, an activity runtime built on standard\nbrowser technology, to render the display, assist with events, and\nhandle JavaScript.',
            "HTML",
            "JavaScript",
            "CSS",
            "As standard webapps, they are self-contained and run in any modern web\nbrowser. But the focus is on running them bound to Sugar services that\nprovide the unique features of Sugar.",
            "The web is evolving very fast to provide the same functionality to\nwebapps that standard desktop applications have.  Web activities\nshould be developed using standard web technologies as much as\npossible.  For example, if there is a need to take a picture from the\ndevice camera, and that is possible with web standards, then those\nshould be used.  If that is not possible, the activity should\ncommunicate with the Sugar services to take the picture.",
            "Sugar Web library",
            "https://github.com/sugarlabs/sugar-web",
            "https://github.com/sugarlabs/sugar-web",
            "It includes the tools that the activity developer can use to make an\nactivity.  The Sugar services are delivered as a JavaScript framework,\nwhich supports common application-level functions, UI widgets and\nnative services.",
            "A copy of the library is contained in each activity.",
            "Sugar Services",
            "Web activities on Sugar GTK",
            "Current Sugar GTK can already run web activities out of the box.  It\nopens a chrome-less window with a WebKitGTK view, and the web activity\nis loaded inside.",
            "The JavaScript interface to connect web activities and Sugar GTK is\nbeing developed.  The interface ends calling the same bits than GTK\nactivities.  It uses WebSockets for the communication between\nJavaScript and Python code.",
            "",
            "Web activities on Android",
            "There is research going on about running web activities on Android.\nThe activity source is bundled in an Android application with one\ncomponent: an Android\nactivity\n(not to confuse with our activity term).  The Android activity is\ncomposed of a chrome-less WebKit view, and the web activity is loaded\ninside.  This is the same as other webapps on\nAndroid do.",
            "Android\nactivity",
            "webapps on\nAndroid",
            "The Android activity exposes a JavaScript\nobject\nthat the JavaScript libraries inside the web activity can use to\ncommunicate with the Java application.  The application can then\ncommunicate with the Sugar shell application and respond to the web\nactivity executing JavaScript.",
            "exposes a JavaScript\nobject",
            "The Sugar shell on Android is a separate process, runs in its own\napplication with one component: an Android bound\nservice.\nThe inter-process communication is made sending Message\nobjects.",
            "Android bound\nservice",
            "Message\nobjects",
            "Many Android activities can be connected to the Sugar shell.  The\nfirst one starts it, and the last one stops it.  They bind to the\nshell sending an Intent\nmessage,\nfor which the shell has an Intent filter that matches.",
            "Intent\nmessage",
            "",
            "The Sugar shell on Android should implement all of the Sugar features,\nunlike Sugar GTK shell that only needs to connect to the current\nfeatures.  But both take adventage of sharing the same JavaScript\ninterface.  The interface should be platform agnostic.",
            "Web activities standalone",
            "The standalone web activities are rendered in any modern web browser. They might\nhave limited functionality but should be as functional as possible. The same\nlibraries as with the other web activities are used.",
            "",
            "Tools",
            "Modularization of JavaScript code is handled with\nRequireJS which provides the AMD\nspecification (Asynchronous Module Definition).",
            "RequireJS",
            "Package management and creation of activities from a template is\nhandled with Volo.",
            "Volo",
            "Unit testing of JavaScript code is done with the\nJasmine framework.",
            "Jasmine",
            "Installation of JavaScript tools is done with\nNode.js.",
            "Node.js",
        ],
    ),
    "ubuntu.md": (
        [
            "Using Sugar on Ubuntu",
            "Ubuntu 19.10 (Eoan Ermine)",
            "Ubuntu 19.04 (Disco Dingo)",
            "Ubuntu 18.04 (Bionic Beaver) and 18.10 (Cosmic Cuttlefish)",
        ],
        [
            "Using Sugar on Ubuntu",
            "Ubuntu is a Debian-based Linux operating system, with Gnome as its default desktop environment. -- wikipedia.org",
            "Debian",
            "wikipedia.org",
            "In relation to Sugar, Ubuntu is a downstream distribution project that can be used to run Sugar.",
            "Ubuntu 19.10 (Eoan Ermine)",
            "Sugar 0.112 can be installed with the following commands:",
            "sudo apt update\nsudo apt install sucrose\n",
            "Known Problems:",
            "ImportError: No module named popwindow",
            "Ubuntu 19.04 (Disco Dingo)",
            "Sugar 0.112 is in the universe repository, and can be installed with the following commands:",
            "sudo add-apt-repository universe\nsudo apt update\nsudo apt install sucrose\n",
            "Ubuntu 18.04 (Bionic Beaver) and 18.10 (Cosmic Cuttlefish)",
            "Sugar 0.112 is in the universe repository, and can be installed with the following commands:",
            "sudo add-apt-repository universe\nsudo apt-get update\nsudo apt install sucrose\n",
            "Known problems",
            "258235c",
            "Metacity 074af8f",
            "04c63f6",
        ],
    ),
    "python-style.md": (
        [
            "Code style for Sugar Python development",
            "General",
            "Python",
            "Libraries",
            "Conventions",
        ],
        [
            "Code style for Sugar Python development",
            "General",
            "Python",
            "Make your code conform to pep8 and pyflakes",
            "Use four spaces for indentation.",
            "Libraries",
            "New code should be written in Python 3, using GTK+ 3, GStreamer 1.0, etc",
            "Use json, ...",
            "Use sugargame when interfacing to pygames",
            "sugargame",
            "Conventions",
        ],
    ),
    "desktop-activity.md": (
        [
            "Write your own Sugar desktop activity",
            "Setting up a development environment",
            "Create a new activity from a template",
            "Customize",
            "Running your activity",
            "File structure",
            "Translation",
            "Revision control your code",
            "Check Python Coverage of your activity",
            "Ready to release",
            "More details",
            "Coding standards",
        ],
        [
            "Write your own Sugar desktop activity",
            "Most Sugar desktop activities are written in Python, using our Sugar\nToolkit libraries.",
            "Sugar\nToolkit",
            "Some Sugar desktop activities are written in languages other than\nPython, such as Smalltalk, C, and JavaScript.  For new activities to\nrun on both Sugar desktop and Sugarizer, please consider Write your\nown Sugar web activity.",
            "Write your\nown Sugar web activity",
            "This page shows how to develop an activity using Python 3 with Sugar Toolkit.",
            "Setting up a development environment",
            "Setup a development\nenvironment, for testing your activity and\nreleasing it for distribution.",
            "Setup a development\nenvironment",
            "Create a new activity from a template",
            "Locate the activity directories.  They may include:",
            "~/Activities",
            "/usr/share/sugar/activities",
            "~/sugar-build/activities",
            "Each installed activity is in a directory under the activity\ndirectories.  This is where you will create your new activity.",
            "Clone the Hello World activity from\nhello-world on GitHub:",
            "hello-world on GitHub",
            "git clone https://github.com/sugarlabs/hello-world-fork.git Name.activity\n",
            "Use the .activity suffix in the directory name of an activity,\nbecause that's the way an activity bundle is released.",
            ".activity",
            "Customize",
            "Your clone of the Hello World activity contains a file,\nactivity/activity.info:",
            "activity/activity.info",
            "[Activity]\nname = HelloWorld\nactivity_version = 1\nbundle_id = org.sugarlabs.HelloWorld\nexec = sugar-activity3 activity.HelloWorldActivity\nicon = activity-helloworld\nlicence = GPLv3+\nrepository = https://github.com/sugarlabs/hello-world-fork.git\n",
            "You must set a new name and a unique bundle_id for your activity.",
            "name",
            "bundle_id",
            "Avoid punctuation in your bundle_id, e.g.,\norg.sugarlabs.my-activity-name is not valid. Instead, use\nCamelCase, e.g., org.sugarlabs.MyActivity.",
            "bundle_id",
            "org.sugarlabs.my-activity-name",
            "org.sugarlabs.MyActivity",
            "You should change the Activity class in your activity.py file, e.g., from:",
            "activity.py",
            "class HelloWorldActivity(activity.Activity):\n",
            "to:",
            "class MyActivity(activity.Activity):\n",
            "You must change the exec field as well, e.g., from:",
            "exec",
            "exec = sugar-activity3 activity.HelloWorldActivity\n",
            "to:",
            "exec = sugar-activity3 activity.MyActivity\n",
            "You should set the repository field to the URL of the git repository\nof your project.",
            "And we recommend that you use a GPLv3+ license.",
            "Your activity.info file will look something like:",
            "activity.info",
            "[Activity]\nname = MyActivity\nactivity_version = 1\nbundle_id = org.sugarlabs.MyActivity\nexec = sugar-activity3 activity.MyActivity\nicon = activity-helloworld\nlicence = GPLv3+\nrepository = https://github.com/MyGitHubAccount/MyActivityRepo.git\n",
            "To read more about the activity.info file, see Activity\nBundles\non our Wiki.",
            "activity.info",
            "Activity\nBundles",
            "You must make your activity icon unique in the Sugar interface by\nmaking a new one, or borrowing from another icon and making changes.\nAsk for help from the community if you don't feel comfortable with\ngraphic design.",
            "Here is activity/activity-helloworld.svg;",
            "activity/activity-helloworld.svg",
            "",
            "You should rename this file and change icon in the activity.info\nfile.",
            "icon",
            "activity.info",
            "Your activity icon must follow the guidelines as described in\nThe Sugar Interface:\nIcons on our Wiki.",
            "The Sugar Interface:\nIcons",
            "There is a helper script, Sugar\nIconify that will help\nyou create Sugar-compliant icons.",
            "Sugar\nIconify",
            "Of course, the interesting changes will be the ones you make to the\nactivity itself. Below you will find links to some resources\non Sugar Activity development, but perhaps the\nbest way to get started is to modify an existing activity that has\nfeatures similar to the one you want to create.",
            "Running your activity",
            "Launch Sugar and your new activity should be immediately available,\nalthough since it has not yet been selected as a favorite, it will\nnot appear by default on the Sugar Home View (F3). You need to either;",
            "type the name of your activity into the search entry and press enter; or,",
            "select the List View (ctrl+2) to see your activity, and click on it.",
            "If all goes well, your activity will launch.",
            "There are many opportunities to make mistakes. Don't get discouraged,\nas debugging is a great way to learn. One useful tool is the Log\nActivity, which will show you the log files of the operating system,\nSugar and activities. Alternatively, you can look at the log files\nfrom the command line.",
            "Log files are usually in the directory ~/.sugar/default/logs.",
            "~/.sugar/default/logs",
            "Log files for sugar-build are in the directory ~/sugar-build/home/dotsugar/default/logs.",
            "~/sugar-build/home/dotsugar/default/logs",
            "Log files are named using the bundle_id.",
            "bundle_id",
            "You may also test interactively by starting Terminal, then cd to the activity directory, and type:",
            "cd",
            "sugar-activity .\n",
            "if your activity uses python2. If it uses python3, type:",
            "sugar-activity3 .\n",
            "File structure",
            "All activities should follow this file structure:",
            "MyActivity.activity/\n|-- activity/\n|   |-- activity.info\n|   `-- activity-icon.svg\n|-- activity.py\n`-- setup.py\n",
            "activity/ contains information about your activity, including the\nname, bundle_id, and the icon.",
            "activity/",
            "name",
            "bundle_id",
            "icon",
            "activity.py contains an instance of the activity class, which is\nrun when your activity is launched.",
            "activity.py",
            "setup.py lets you install your activity or make an installable\nbundle with it.",
            "setup.py",
            "Translation",
            "Sugar serves a global audience, so it is important to enable your\nactivity for internationalization and localization. A guide to best\npractices\nis on our Wiki.",
            "guide to best\npractices",
            "Revision control your code",
            "For development you can initialize the repository as a git\nrepository. This will help you to track your changes. First use git\ninit\nto initialize the repository:",
            "git\ninit",
            "git init\n",
            "With git\nstatus\nyou can show the available files in the folder they are still\nuntracked. Now add all the files in the directory and commit those\nchanges, you can use git status again to see the current state:",
            "git\nstatus",
            "git add .\ngit commit -a -m 'Initial import'\ngit status\n",
            "We recommend that you use github to host your\nactivity.",
            "github",
            "Check Python Coverage of your activity",
            "You can check the Python Coverage of your activity by following this guide.",
            "this",
            "Ready to release",
            "Once your activity is working, you can ask to have\nyour activity repository hosted under the Sugar Labs github\norganization.",
            "Sugar Labs github\norganization",
            "Make an XO bundle.",
            "python setup.py dist_xo\n",
            "And if it works with Python 2 then upload it to the Sugar Activity\nLibrary http://activities.sugarlabs.org/.\nAfter that, users of Sugar can download and install your activity.",
            "http://activities.sugarlabs.org/",
            "For further releases, you must update the activity_version in\nactivity/activity.info.",
            "activity/activity.info",
            "More details",
            "Sugar Toolkit Documentation.",
            "Sugar Toolkit Documentation",
            "Python GTK+ 3 Tutorial.",
            "Python GTK+ 3 Tutorial",
            "Make Your Own Sugar Activities, a book by James Simmons.",
            "Make Your Own Sugar Activities",
            "Coding standards",
            "We currently use Python 3 for\nthe Sugar Toolkit and Sugar activity development.",
            "Python 3",
            "We recommend flake8 as a\nwrapper around the pep8\nand pyflakes code checkers.",
            "flake8",
            "pep8",
            "pyflakes",
            "To check for flake8 warnings in the current directory, run this command",
            "python3 -m flake8 *.py\n",
        ],
    ),
    "contact.md": (
        ["Contact"],
        [
            "Contact",
            "Join us at Sugar-devel mailing list\nhttp://lists.sugarlabs.org/listinfo/sugar-devel.",
            "http://lists.sugarlabs.org/listinfo/sugar-devel",
            "We also have an IRC channel. Please enter #sugar at\nFreenode. You may wish to begin by using their\nwebchat.",
            "IRC channel",
            "Freenode",
            "webchat",
        ],
    ),
    "android.md": (
        [
            "Sugar on Android",
            "Web activity on Android",
            "Activity icon",
            "Android project",
            "Android shell",
            "An activity launcher for Android shell",
            "Debugging web activities on Android",
        ],
        [
            "Sugar on Android",
            "Web activity on Android",
            "Currently there are several manual steps that need to be executed in\norder to create a web activity for Android. When things stabilize the\nprocess can be automated, ideally we would enhance the setup.py\ncommand to build an Android application package file (APK) ready for\ndistribution and installation on a device running Android.",
            "./setup.py dist-apk\n",
            "The APK could be built using the android sdk and after that, an APK\nwould appear in the activity dist/ directory.",
            "Activity icon",
            "Android stores app icons in different sizes: : 512x512, 144x144,\n96x96, 72x72, 48x48 . For details see\nhttp://developer.android.com/guide/practices/ui_guidelines/icon_design_launcher.html.",
            "http://developer.android.com/guide/practices/ui_guidelines/icon_design_launcher.html",
            "To convert an SVG icon to a PNG suitable as a launcher icon you can\nuse the 'convert' command from http://www.imagemagick.org.",
            "http://www.imagemagick.org",
            "convert -background none -density 1200 -resize 512x512 activity/activity-icon.svg activity-icon.png\n",
            "Android project",
            "Make an Android app with one android.app.Activity inside, which is the\ndefault project the IDE creates. See\nhttps://developer.android.com/training/basics/firstapp/creating-project.html.",
            "https://developer.android.com/training/basics/firstapp/creating-project.html",
            "For the icon, select the converted PNG icon in the Activity icon\nsection above.",
            "Copy all the web activity contents to the assets directory.  You\ncan copy the boilerplate and adjust from\nhttps://github.com/manuq/clockjs-android.",
            "https://github.com/manuq/clockjs-android",
            "Android shell",
            "Here is an Android project that contains a bound service to which\nother apps can bind to: https://github.com/manuq/aboutmejs-android/.\nThis service needs to be separated in its own app.  The important bits\nare:",
            "https://github.com/manuq/aboutmejs-android/",
            "the Intent filter in\nAndroidManifest.xml",
            "AndroidManifest.xml",
            "SugarService.java",
            "SugarService.java",
            "An activity launcher for Android shell",
            "In Android is possible to replace the default launcher. A launcher is\nbasically a normal app, that has an Intent with a category\nCATEGORY_HOME.",
            "CATEGORY_HOME",
            "Being a normal Android app, it can be a web activity.  And it would be\npossible to put colors to the launcher SVG icons and organize them in\na spiral, just like the GTK+ Sugar desktop home.",
            "There is a Home screen replacement sample in the\nandroid-sdk samples. It\ncan be built and installed as any other app, following the steps at\nhttps://developer.android.com/training/basics/firstapp/creating-project.html.",
            "android-sdk samples",
            "https://developer.android.com/training/basics/firstapp/creating-project.html",
            "Debugging web activities on Android",
            "To get the inspector in your web activity using Chrome, see Remote\nDebugging on\nAndroid.",
            "Remote\nDebugging on\nAndroid",
        ],
    ),
    "gtk3-porting-guide.md": (
        [
            "GTK 3 Porting Guide",
            "GTK",
            "Sugar Toolkit",
            "Sugar Activities",
            "Required Skills",
            "How to Port to GTK 3",
            "How to Port a Sugar Activity to GTK 3",
            "Port to Sugar Toolkit for GTK 3",
            "Port to GTK 3",
            "Problems",
            "Simple example on creating a toolbar",
            "Tools",
            "Constructor considerations",
            "HBox, VBox, pack_start and pack_end",
            "GtkAlignment considerations",
            "Gtk Menu Popup",
            "Gdk",
            "Pango",
            "Gio.Settings from GConf",
            "Other considerations",
            "Constants",
            "Pixbufs",
            "Changes to the Clipboard",
            "Changes to Drag-and-Drop",
            "Port from Drawable to Cairo",
            "Port from Cairo in GTK 2 to Cairo in GTK 3",
            "Replacing pixmaps with Cairo",
            "Taking a screenshot and making a thumbnail",
            "Creating a video widget",
            "Hacks to help in porting",
            "Use a virtual machine",
            "Use an iterative restarter",
            "Use Extended Python debugger",
            "Check logs with multitail",
            "Use the pygobject code as example",
            "Monitoring DBus",
            "Port to Python 3",
            "Releasing Activities (For maintainers)",
            "Notes",
            "Resources",
            "Porting examples",
        ],
        [
            "GTK 3 Porting Guide",
            "Guide to porting Sugar Activities to GTK 3.",
            "GTK",
            "GTK is a library for creating graphical user interfaces.  GTK is written in C.  GTK for Python is a language binding.",
            "GTK",
            "GTK 2 is the previous major version of GTK.  GTK 2 for Python is a static binding, and is called PyGTK.  GTK 2 is soon to be obsolete and unavailable.",
            "PyGTK",
            "GTK 2 Reference Manual",
            "GTK 3 is the current major version of GTK.  It breaks both API and ABI compared with GTK 2.  GTK 3 for Python is a GObject Introspection binding, using PyGObject.",
            "PyGObject",
            "PyGObject API Reference",
            "GTK 3 Reference Manual",
            "Sugar Toolkit",
            "Sugar Toolkit provides services and a set of GTK widgets to build activities and other Sugar components on Linux based computers using Python.",
            "Sugar Toolkit for GTK 2",
            "sugar",
            "Sugar Toolkit for GTK 3",
            "sugar3",
            "Sugar Toolkit for GTK 3 Documentation",
            "Sugar Activities",
            "New Sugar activities are written in either;",
            "Sugar Web",
            "Old Sugar activities were written in Python using GTK 2 and Sugar Toolkit for GTK 2.",
            "These old activities are to be ported to GTK 3.  This guide explains how.",
            "Required Skills",
            "How to Port to GTK 3",
            "General information for all GTK applications;",
            "PyGObject - Porting from Static Bindings",
            "PyGObject - Introspection Porting",
            "Migrating from GTK 2 to GTK 3",
            "How to Port a Sugar Activity to GTK 3",
            "Set up development environment for Sugar on GTK 3; such as Ubuntu 18.04,",
            "Set up test environments capable of both GTK 2 and GTK 3 at the same time; such as Ubuntu 16.04,",
            "Quiesce the activity source by making sure the activity works properly before porting, fixing any bugs, closing any solved issues, merging any pull requests or branches and releasing the last GTK 2 version; see the activity maintainer checklist.",
            "maintainer checklist",
            "Port to Sugar Toolkit for GTK 3 (see below),",
            "Port to GTK 3, using the PyGObject script pygi-convert.sh to convert automatically much as it can.",
            "PyGObject script pygi-convert.sh",
            "Port to any other libraries, such as Sugargame, Cairo, Pango, GConf to Gio.Settings, GStreamer 0.10 to GStreamer 1.0,",
            "Test and iterate until original functionality is reached.",
            "Follow the Code Guidelines during all porting.",
            "Code Guidelines",
            "Write any comments in the code, by adding # README:, # TODO: and # FIXME: explaining what are the problems that you are having with that chunk of code. Put a link if it's necessary.",
            "Port to Sugar Toolkit for GTK 3",
            "sugar",
            "sugar3",
            "sugar",
            "sugar3",
            "sugar-convert.sh",
            "set_toolbar_box",
            "set_toolbox",
            "hello-world",
            "service_name",
            "class",
            "bundle_id",
            "service_name",
            "exec",
            "class",
            "Record",
            "sugar3.activity.Activity",
            ".get_window()",
            "Port to GTK 3",
            "To start, change the importing instruction for GTK from",
            "import\xa0gtk\n",
            "to",
            "import\xa0gi\ngi.require_version('Gtk',\xa0'3.0')\nfrom\xa0gi.repository\xa0import\xa0Gtk\n",
            "Note that require_version needs to called only the first time when GTK\nis being imported.",
            "require_version",
            "Similar imports that may be used are:",
            "from gi.repository import Gdk, Pango, Gobject\n",
            "Then you have to change each call that involves GTK, for example\ncreating a button will look now like this:",
            "button\xa0=\xa0Gtk.Button()\n",
            "A simple hello world program in GTK 3 looks like this:",
            "from gi.repository import Gtk\n\ndef _destroy_cb(widget, data=None):\n    Gtk.main_quit()\n\nw = Gtk.Window()\nw.connect(\"destroy\", _destroy_cb)\nlabel = Gtk.Label('Hello World!')\nw.add(label)\nw.show_all()\n\nGtk.main()\n",
            "The changes that were needed to port the hello-world activity can be\nseen in this\ncommit.",
            "this\ncommit.",
            "Problems",
            "Several common problems arise during a port.",
            "Simple example on creating a toolbar",
            "A Sugar Activity has a toolbar.\nThese are the relevant modules required to create a simple toolbar containing the activity button and the stop button.",
            "from sugar3.activity import activity\nfrom sugar3.graphics.toolbarbox import ToolbarBox\nfrom sugar3.activity.widgets import ActivityToolbarButton\nfrom sugar3.activity.widgets import StopButton\nfrom sugar3.graphics.toolbarbox import ToolbarButton\nfrom sugar3.graphics import style\n",
            "Since the ActivityToolbar() module has been deprecated, the toolbar can\nnow be called using ToolbarBox()",
            "ToolbarBox()",
            "Then, from the ToolbarBox(), include the ActivityButton and StopButton.\nIn order for the StopButton to be align to the right as per Sugar\nactivity interface, a separator has to be included as well.",
            "toolbar_box = ToolbarBox()\n\nactivity_button = ActivityToolbarButton(self)\ntoolbar_box.toolbar.insert(activity_button, 0)\nactivity_button.show()\n\nseparator = Gtk.SeparatorToolItem()\nseparator.props.draw = False\nseparator.set_expand(True)\ntoolbar_box.toolbar.insert(separator, -1)\nseparator.show()\n\nstop_button = StopButton(self)\ntoolbar_box.toolbar.insert(stop_button, -1)\nstop_button.show()\nself.set_toolbar_box(toolbar_box)\ntoolbar_box.show()\n",
            "Tools",
            "If you are having trouble finding how a particular GTK\nclass/method/constant has been named in PyGI, run\npygi-enumerate.py\nand grep the output. (this app lists all identified methods and\nconstants). Usage example:",
            "pygi-enumerate.py",
            "$ python pygi-enumerate.py | grep get_selection\nGtk.AccelLabel.get_selection_bounds() (instance method)\nGtk.Editable.get_selection_bounds() (instance method)\nGtk.Entry.get_selection_bounds() (instance method)\nGtk.IconView.get_selection_mode() (instance method)\nGtk.Label.get_selection_bounds() (instance method)\nGtk.SelectionData.get_selection() (instance method)\nGtk.SpinButton.get_selection_bounds() (instance method)\nGtk.TextBuffer.get_selection_bound() (instance method)\nGtk.TextBuffer.get_selection_bounds() (instance method)\nGtk.TreeView.get_selection() (instance method)\n",
            "Constructor considerations",
            "With PyGI it is possible to use Python-like constructors, or “new”\nfunctions e.g. the following are (usually) equivalent:",
            "label\xa0=\xa0Gtk.Button()\nlabel\xa0=\xa0Gtk.Button.new()\n",
            "However, the first form is preferred: it is more Python-like.\nInternally, the difference is that Gtk.Label.new() translates to a call\nto gtk_label_new(), whereas Gtk.Label() will\ndirectly construct an instance of GtkLabel at the GObject level.",
            "Gtk.Label.new()",
            "gtk_label_new()",
            "Gtk.Label()",
            "If the constructor takes parameters, they must be named. The\nparameters correspond to GObject properties in the API documentation\nwhich are usually marked as “Construct”. For example, the following code\nwill not work:",
            'expander\xa0=\xa0Gtk.Expander("my expander")\n',
            "The (confusing) error is:",
            "TypeError:\xa0GObject.__init__()\xa0takes\xa0exactly\xa00\xa0arguments\xa0(1\xa0given)\n",
            "The solution is to go to the GtkExpander API\ndocumentation\nand find the appropriate property that we wish to set. In this case it\nis label (which is a Construct property, further increasing our\nconfidence of success), so the code should be:",
            "GtkExpander API\ndocumentation",
            'expander\xa0=\xa0Gtk.Expander(label="my expander")\n',
            'Combining the two points above, if you wish to call a construct-like\nfunction such as gtk_button_new_with_label(), you do have the option\nof calling Gtk.Button.new_with_label(), however if we check the\nGtkButton\nproperties\nwe see one called "label" which is equivalent. Therefore\ngtk_button_new_with_label("foo") should be called as:',
            "GtkButton\nproperties",
            'gtk_button_new_with_label("foo")',
            'button\xa0=\xa0Gtk.Button(label="foo")\n',
            "HBox, VBox, pack_start and pack_end",
            "GtkHBox and GtkVBox, commonly used containers in GTK 2 code, have\npack_start and pack_end methods. These take 4 parameters:",
            "pack_start",
            "pack_end",
            "In PyGTK, the expand, fill and padding parameters were optional: if\nunspecified, the default values above were used. In PyGI, these\nparameters are not optional: all 4 must be specified. Hence the\nrules for adding in the extra parameters are:",
            "expand",
            "fill",
            "padding",
            "These parameters can be specified either as positional arguments or as\nnamed keyword arguments, however all 4 must always be specified. Some\ndevelopers prefer keyword arguments, arguing that the following:",
            "    box.pack_start(widget, expand=True, fill=False, padding=4)\n",
            "is much more readable than:",
            "    box.pack_start(widget, True, False, 4)\n",
            "If you are using pack_start with the default values (expand=True,\nfill=True and padding=0), you can avoid using pack_start (and the\nparameter pain that it brings with it) by just using .add for some added\ncleanliness, e.g.",
            "pack_start",
            "pack_start",
            "    box.pack_start(widget, True, True, 0)\n",
            "can be replaced with:",
            "    box.add(widget)\n",
            "In GTK 3, GtkVBox and GtkHBox have been deprecated, which means they might be removed later. The replacement is to use GtkBox directly, and you may wish to\nmake this change now. e.g.:",
            "GtkVBox",
            "GtkHBox",
            "GtkBox",
            "    vbox = Gtk.Box(orientation=Gtk.Orientation.VERTICAL)\n    hbox = Gtk.Box(orientation=Gtk.Orientation.HORIZONTAL, homogeneous=True, spacing=8)\n",
            "However, it must be noted that if GtkBox is used directly (instead of\nusing GtkHBox/GtkVBox), the default value of expand is now\nFalse. The implications of this are:",
            "GtkBox",
            "expand",
            "False",
            "pack_start",
            "pack_start",
            "expand=False",
            "padding=0",
            ".add()",
            "GtkAlignment considerations",
            "In PyGTK, the gtk.Alignment constructor takes four optional parameters:",
            "gtk.Alignment",
            "In PyGI/GTK3, these parameters are still optional, however, the default values have changed. They are now:",
            "Additionally, PyGTK accepted these construction parameters as positional\narguments. As explained above, they must now be converted to keyword\narguments.",
            "Gtk Menu Popup",
            "The Gtk.Menu.popup function now works slightly differently. The user\nsupplied positioning function now takes different parameters. These are\nmenu, x, y, push_in and user_data.",
            "Gdk",
            "Previously, gdk was an attribute of the GTK module, which means that it\ncan be called through GTK. For example, if we want to use\ncolor_parse():",
            "gtk.gdk.color_parse(color)\n",
            "However, what we have to do now is:",
            "from\xa0gi.repository\xa0import\xa0Gdk\n",
            "Then we can modify the code to the following:",
            "Gdk.color_parse(color)\n",
            "Pango",
            "Following the release of GTK 3, we should not be importing pango like\nthis:",
            "import\xa0pango\n",
            "In fact, we can now import pango as an attribute within the GTK 3\nlibrary:",
            "from\xa0gi.repository\xa0import\xa0Pango\xa0as\xa0pango\n",
            "Gio.Settings from GConf",
            "Any use of GConf should be ported to Gio.Settings.",
            "Other considerations",
            "self.allocation property is no longer available. self.get_allocation() should be used instead.",
            "self.allocation",
            "self.get_allocation()",
            "So to get the allocation size:",
            "self.allocation.width\nself.allocation.height\n",
            "should be replaced by:",
            "self.get_allocated_width()\nself.get_allocated_height()\n",
            "Constants",
            "Most of the constants have slightly different formats, e.g.,",
            "gtk.STATE_NORMAL",
            "Gtk.StateFlags.NORMAL",
            "gtk.RESPONSE_ACCEPT",
            "Gtk.ResponseType.ACCEPT",
            "gtk.JUSTIFY_CENTER",
            "Gtk.Justification.CENTER",
            "gtk.RELIEF_NONE",
            "Gtk.ReliefStyle.NONE",
            "Pixbufs",
            "The pixbuf libraries are in their own repository",
            "from\xa0gi.repository\xa0import\xa0GdkPixbuf\nGdkPixbuf.Pixbuf.new_from_file()\n",
            "Changes to the Clipboard",
            "Two things to note:",
            "clipboard\xa0=\xa0Gtk.Clipboard.get(Gdk.SELECTION_CLIPBOARD)\n",
            "clipboard.set_text(string,\xa0len(string))\n",
            "See python-gtk-3-tutorial/clipboard for more details.",
            "python-gtk-3-tutorial/clipboard",
            "Changes to Drag-and-Drop",
            "Slightly different syntax:",
            "self.drag_dest_set(Gtk.DestDefaults.ALL,\xa0[],\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0Gdk.DragAction.COPY)\nself.drag_dest_set_target_list(Gtk.TargetList.new([]))\nself.drag_dest_add_text_targets()\nself.connect('drag_data_received',\xa0self._drag_data_received)\n",
            "and:",
            "data.get_text()\n",
            "or:",
            "data.get_image()\n",
            "See\npython-gtk-3-tutorial/drag_and_drop\nfor more details.",
            "python-gtk-3-tutorial/drag_and_drop",
            "Port from Drawable to Cairo",
            "GTK 3 does not support GTK Drawable objects, so the first step is to\nget your activity running under Cairo.",
            'import cairo\n\n# From activity.Activity, you inherit a canvas.\n# Create a Cairo context from the window.\ncairo_context = self.canvas.get_window().cairo_create()\n# Create an XLib surface to be used for drawing\nxlib_surface = surface.create_similar(cairo.CONTENT_COLOR,\n                                      gtk.gdk.screen_width(),\n                                      gtk.gdk.screen_height())\n# You\'ll need a Cairo context from which you\'ll build a GTK Cairo context\ncairo_context = cairo.Context(xlib_surface)\ncairo_context = gtk.gdk.CairoContext(cairo_context)\n# Use this context as you would a Drawable, substituting Cairo commands\n# for gtk commands, e.g.,\ncairo_context.move_to(0, 0)\ncairo_context.line_to(100, 100)\n# Cairo uses floats from 0 to 1 for RGB values\ncairo_context.set_source_rgb(r, g, b)\ncairo_context.rectangle(x, y, w, h)\ncairo_context.fill()\n# To invalidate a region to force a refresh, use:\nself.canvas.queue_draw_area(x, y, w, h)\n# Handle the expose event\n# "expose" became "draw" for the cairo signal\ndef do_expose_event(self, event):\n    # Create the cairo context\n    cairo_context = self.canvas.get_window().cairo_create()\n    cairo_context.rectangle(event.area.x, event.area.y,\n                            event.area.width, event.area.height)\n    cairo_context.clip()\n    cairo_context.set_source_surface(xlib_surface)\n    cairo_context.paint()\n',
            "Pango is a bit different when used with Cairo:",
            "import pango, pangocairo\n\n# Again, from the xlib_surface...\ncairo_context = cairo.Context(xlib_surface)\n\n# Create a PangoCairo context\ncairo_context = pangocairo.CairoContext(cairo_context)\n\n# The pango layout is created from the Cairo context\npango_layout = cairo_context.create_layout()\n\n# You still use pango to set up font descriptions.\nfd = pango.FontDescription('Sans')\nfd.set_size(12 * pango.SCALE)\n\n# Tell your pango layout about your font description\npango_layout.set_font_description(fd)\n\n# Write text to your pango layout\npango_layout.set_text('Hello world', -1)\n\n# Position it within the Cairo context\ncairo_context.save()\ncairo_context.translate(x, y)\ncairo_context.rotate(pi / 3)  # You can rotate text and images in Cairo\ncairo_context.set_source_rgb(1, 0, 0)\n\n# Finally, draw the text\ncairo_context.update_layout(pango_layout)\ncairo_context.show_layout(pango_layout)\ncairo_context.restore()\n",
            "To draw a bitmap...",
            "# Again, from the xlib_surface...\ncairo_context = cairo.Context(xlib_surface)\n\n# Create a gtk context\ncairo_context = gtk.gdk.CairoContext(cairo_context)\ncairo_context.set_source_pixbuf(pixbuf, x, y)\ncairo_context.rectangle(x, y, w, h)\ncairo_context.fill()\n",
            "To read a pixel from the xlib surface...",
            "# create a new 1x1 cairo surface\ncairo_surface = cairo.ImageSurface(cairo.FORMAT_RGB24, 1, 1);\ncairo_context = cairo.Context(cairo_surface)\n# translate xlib_surface so that target pixel is at 0, 0\ncairo_context.set_source_surface(xlib_surface, -x, -y)\ncairo_context.rectangle(0,0,1,1)\ncairo_context.set_operator(cairo.OPERATOR_SOURCE)\ncairo_context.fill()\ncairo_surface.flush() # ensure all writing is done\n# Read the pixel\nreturn (ord(pixels[2]), ord(pixels[1]), ord(pixels[0]), 0)\n",
            "Port from Cairo in GTK 2 to Cairo in GTK 3",
            "The Cairo/Pango interaction is a little different:",
            "from gi.repository import Pango, PangoCairo\ncairo_context = ...\npango_layout = PangoCairo.create_layout(cairo_context)\nfd = Pango.FontDescription('Sans')\nfd.set_size(12 * Pango.SCALE)\npango_layout.set_font_description(fd)\npango_layout.set_text('Hello World', -1)\ncairo_context.set_source_rgb(1, 0, 0)\nPangoCairo.update_layout(cairo_context, pango_layout)\nPangoCairo.show_layout(cairo_context, pango_layout)\n",
            "The get_extents() method if different in PangoCairo. It calculates an\nextent as a Rectangle, but doesn't return anything. There is a method,\nget_logical_extents() that returns a Rectangle. Alas, it is not\nnecessarily available after v1.16. Note that Rectangle is not a list but\na class with methods for get_x(), get_y(), get_width(), and\nget_height(), so you cannot iter over it.",
            "get_extents()",
            "get_logical_extents()",
            "get_x()",
            "get_y()",
            "get_width()",
            "get_height()",
            "Note that cairo.Region will no longer work in GTK 3",
            "cairo.Region",
            "(For more details, see\nhttp://developer.gnome.org/pangomm/2.28/annotated.html)",
            "http://developer.gnome.org/pangomm/2.28/annotated.html",
            "Replacing pixmaps with Cairo",
            "You need to replace your pixmaps with Cairo in GTK 3.",
            "Taking a screenshot and making a thumbnail",
            "To make a screenshot of the window:",
            "width, height = window.get_width(), window.get_height()\nthumb_surface = Gdk.Window.create_similar_surface(window,\n                                                    cairo.CONTENT_COLOR,\n                                                    width, height)\n\nthumb_width, thumb_height = style.zoom(100), style.zoom(80)\ncairo_context = cairo.Context(thumb_surface)\nthumb_scale_w = thumb_width * 1.0 / width\nthumb_scale_h = thumb_height * 1.0 / height\ncairo_context.scale(thumb_scale_w, thumb_scale_h)\nGdk.cairo_set_source_window(cairo_context, window, 0, 0)\ncairo_context.paint()\nthumb_surface.write_to_png(png_path_or_filelike_object)\n",
            "Creating a video widget",
            "Some necessary changes include:",
            "Using",
            "get_property('window').get_xid()\n",
            "Instead of",
            "window.xid\n",
            "Using",
            "set_double_buffered(False)\nset_app_paintable(True)\n",
            "Instead of",
            "unset_flags(gtk.DOUBLE_BUFFERED)\nset_flags(gtk.APP_PAINTABLE)\n",
            "Hacks to help in porting",
            "Use a virtual machine",
            "Use an editor with remote file access to a virtual machine, such as emacs with tramp.",
            "Start Terminal inside Sugar and then start Screen.  Change to the activity source directory.  Use an SSH client to reach into the Terminal shell to run sugar-activity.",
            "sugar-activity",
            "Use an iterative restarter",
            "Temporarily add code to detect when your editor rewrites files.  For example in activity.Activity.__init__;",
            "activity.Activity.__init__",
            "# testing restarter\nct = os.stat('file.py').st_ctime\ndef restarter():\n    if os.stat('file.py').st_ctime != ct:\n        self.close()\n        return False\n    return True\nGObject.timeout_add(233, restarter)\n",
            "Use Extended Python debugger",
            "epdb library is useful to inspect the code while the Activity is running.",
            "epdb",
            "sudo\xa0yum\xa0install\xa0python-epdb\n",
            "You can put trace point in the code to stop and make tests by doing this:",
            "import\xa0epdb;epdb.set_trace()\n",
            "Finally I run Get Books Activity from the Terminal Activity to be able\nto write some code on a shell. This is the command that I use:",
            "sugar-launch\xa0org.laptop.sugar.GetBooksActivity\n",
            "See also: Development Team/Debugging",
            "Development Team/Debugging",
            "Check logs with multitail",
            "multitail is really helpful for developing Sugar Activities. It can be used to read the latest log that an Activity wrote and see how it's growing.",
            "For example, if we run an Activity three times it will create 3 different .log files behind ~/.sugar/default/logs directory. With multitail we will be seeing the most recent version of the activity log.",
            "Install multitail using:",
            "sudo yum install multitail\n",
            "Show the proper log files",
            'cd ~/.sugar/default/logs\nmultitail -iw "*<Activity Name>*" 1 -m 0\n',
            "-iw is to inform to multitail about the input files and check for them every 1 second\n-m is to let multitail know about the buffersize (0 is infinite)",
            "Use the pygobject code as example",
            "pygobject is what we use to make\nGTK 3 activities. So, it's really useful to take a look at the code\nexamples that are there. Even more, you can run some demo application\nthat show how to use something specific about the library.",
            "pygobject",
            "git\xa0clone\xa0git://git.gnome.org/pygobject\n",
            "cd\xa0pygobject\ncd\xa0demos/gtk-demo/demos\npython\xa0pixbuf.py\n",
            "cd\xa0pygobject\ngit\xa0grep\xa0GdkPixbuf\n",
            "Monitoring DBus",
            "Not sure how this command works, but it can give us an interesting\ninformation. If you run this command and plug an USB drive you will see\nuseful information",
            "dbus-monitor\xa0--system\n",
            "Port to Python 3",
            "We are migrating towards Python 3. Python 3 does not support GTK 2.\nHence, once the activity is ported to GTK 3, please consider porting\nthe activity from Python 2 to Python 3.",
            "Ref: Guide to port activities to Python\n3",
            "Guide to port activities to Python\n3",
            "Releasing Activities (For maintainers)",
            "Once an activity is ported, a new release can be made. The major version\nshould be greater than the existing one.",
            "Please follow\nthis\nguide for releasing a new version",
            "this",
            "Notes",
            "These are the changes noted by developers while porting activities",
            "Gtk.Widget.hide_all() does not exist anymore. We should use just .hide Ref",
            "Gtk.Widget.hide_all()",
            ".hide",
            "Ref",
            "If the code creates some own object, and it defines some properties,\nyou should use __gproperties__ dictionary. Ref",
            "__gproperties__",
            "Ref",
            "Gtk.ListStore doesn't have the method .reorder. There is a\nticket reported\nupstream about this.",
            "Gtk.ListStore",
            ".reorder",
            "ticket",
            "I replaced the use of dbus by Gio to monitor (dis)connection of pen drives",
            "dbus",
            "Gio",
            "Migrate custom signals:\nIf you have defined custom gtk objects with custom signal you need to update them to the new way\nYou should replace this:",
            "the new way",
            "from gobject import signal_new, TYPE_INT, TYPE_STRING, TYPE_BOOLEAN, TYPE_PYOBJECT, TYPE_NONESIGNAL_RUN_LAST,     signal_new('extlistview-modified', gtk.TreeView,\nSIGNAL_RUN_LAST, TYPE_NONE, ())\n",
            "by adding the signal definition inside the object that you are creating using the __gsignals__ dictionary like this (in this case Gtk.TreeView\nis the class that our object inherits):",
            "__gsignals__",
            "from gi.repository\nimport GObject\nclass ExtListView(Gtk.TreeView):\n__gsignals__ = { 'extlistview-modified': (GObject.SignalFlags.RUN_LAST, None, ()), }\n",
            "The last argument of the signal definition are the\nargument types that the callback will receive.",
            "Change the mouse cursor",
            "Example use case:\nWhen the activity is working and we want to show a work in progress cursor.",
            "Replace this:",
            "self.window.set_cursor(gtk.gdk.Cursor(gtk.gdk.WATCH))\n",
            "with:",
            "from\xa0gi.repository\xa0import\xa0Gdk\nself.get_window().set_cursor(Gdk.Cursor(Gdk.CursorType.WATCH))\n",
            "Resources",
            "http://python-gtk-3-tutorial.readthedocs.org",
            "http://python-gtk-3-tutorial.readthedocs.org",
            "http://www.pygtk.org/docs/pygtk/",
            "https://developer.sugarlabs.org/sugar3/",
            "http://developer.gnome.org/gtk3/stable/",
            "http://wiki.laptop.org/go/Activities/PortingToGtk3",
            "http://developer.gnome.org/pangomm",
            "http://gstreamer.freedesktop.org/data/doc/gstreamer/head/gstreamer/html/index.html",
            "https://wiki.ubuntu.com/Novacut/GStreamer1.0",
            "Porting examples",
            "Biorhythm (GTK 3 and PangoCairo)",
            "Peru Learns English (GTK 3 and GStreamer 1.0)",
            "Jump (GTK 3 and Sugargame)",
            "I know Madagascar (GTK 3 and Sugargame)",
        ],
    ),
    "javascript-style.md": (
        [
            "Code style for Sugar JavaScript development",
            "General",
            "Javascript",
            "Tools",
            "",
            "js-beautify",
        ],
        [
            "Code style for Sugar JavaScript development",
            "General",
            "Javascript",
            "Make your code conform to JSHint. See explanation below.",
            "See explanation below",
            "When writing new code, use 4 spaces for indentation, but when editing existing code, use the same indentation style.",
            "The js-beautify tool can be handy for the indentation part. See\nexplanation below.",
            "See\nexplanation below",
            "Here is a good reading about javascript code conventions\nhttp://javascript.crockford.com/code.html .",
            "http://javascript.crockford.com/code.html",
            "For public and private members of an object, read\nhttp://javascript.crockford.com/private.html.  To make the object\navailable in private members, keep a private variable named that:",
            "http://javascript.crockford.com/private.html",
            "var that = this;\n",
            "Tools",
            "",
            "Use JSHint http://jshint.com/ to check for errors and make the\nsource compatible with our coding conventions.  The jshint command is\nprovided by sugar-build.",
            "http://jshint.com/",
            "To check JavaScript code:",
            "jshint js/main.js\n",
            "Add it to your editor to ease development.  There are several plugins\nat http://jshint.com/install/ .",
            "http://jshint.com/install/",
            "js-beautify",
            "Use js-beautify https://github.com/einars/js-beautify to make the\nsources compatible with our indentation conventions.  The js-beautify\ncommand is provided by sugar-build.",
            "https://github.com/einars/js-beautify",
            "To clean javascript code:",
            "js-beautify --replace --good-stuff js/main.js\n",
            "Warning: the --replace option will modify your source.  But you will\nbe safe if you are versioning it (we use git for Sugar Web).",
            "It can do HTML as well:",
            "js-beautify --type html --replace --indent-size 2 index.html\n",
            "Add it to your editor to ease development.  There are several plugins\nat http://jsbeautifier.org/ .",
            "http://jsbeautifier.org/",
        ],
    ),
    "contributing.md": (
        [
            "Contributing",
            "Modifying Activities",
            "Checklist - anyone",
            "Checklist - maintainer",
            "Modifying Sugar",
            "Workflow",
            "Open an Issue",
            "Forking",
            "Cloning",
            "Branching",
            "Making commits",
            "Sending a pull-request",
            "Keep your pull-request up to date",
            "Keep your fork up to date",
            "Review",
            "Close Issue",
            "Testing",
            "Guide for Reviewers",
            "Goals",
            "Checklist",
            "Critical repositories",
            "Frequently Asked Questions",
            "I've used the GitHub editor, how can I rebase or amend commits?",
            "Error 403 on git push",
        ],
        [
            "Contributing",
            "We use the pull-request model, see GitHub's help on pull-request.",
            "GitHub's help on pull-request",
            "In brief, you will:",
            "Please note there is no need to ask permission to work on an\nissue. You should check for pull requests linked to an issue you are\naddressing; if there are none, then assume nobody has done\nanything. Begin to fix the problem, test, make your commits, push your\ncommits, then make a pull request. Mention an issue number in the\npull request, but not the commit message. These practices allow the\ncompetition of ideas (Sugar Labs is a meritocracy).",
            "Modifying Activities",
            "Most activity repositories can be found in our GitHub sugarlabs\norganization.",
            "GitHub sugarlabs\norganization",
            "sugarlabs",
            "A few activity repositories are somewhere else; read the\nactivity/activity.info file, check the metadata on the\nactivities.sugarlabs.org app\nstore, or the Activity page on\nwiki.sugarlabs.org, or our\ndeprecated gitorious instance.",
            "activity/activity.info",
            "activities.sugarlabs.org app\nstore",
            "Activity page on\nwiki.sugarlabs.org",
            "gitorious instance",
            "For new activities, see Write your own Sugar desktop\nactivity, or Write your own Sugar web\nactivity, then make a new repository in your\nGitHub account, put the source code in it, then ask the systems@\nlist to move it to the\nGitHub sugarlabs organization.",
            "Write your own Sugar desktop\nactivity",
            "Write your own Sugar web\nactivity",
            "systems@\nlist",
            "sugarlabs",
            "After modifying an activity, a new release may be needed.  Some activities have no maintainer, so you may need to be the maintainer for a short time.",
            "Checklist - anyone",
            "[ ] run the activity and confirm that you understand what it is for, what it does, and how a child will use it,",
            "[ ] make a fork and clone it,",
            "[ ] check if what you want to change is available already in any other branches or forks,",
            "[ ] make and test your changes,",
            "test",
            "[ ] if your changes add a new feature or will affect users; update the NEWS file, the README.md file, and the help-activity,",
            "[ ] if there is a po/*.pot file, and your changes affect translated strings; regenerate using python setup.py genpot,",
            "po/*.pot",
            "python setup.py genpot",
            "[ ] make a branch, one or more commits, and a pull request, see Workflow below.",
            "Workflow",
            "Checklist - maintainer",
            "[ ] for Python 2 branches, check version of latest bundle release in\nactivities.sugarlabs.org,",
            "activities.sugarlabs.org",
            "[ ] check version of latest tarball release in download.sugarlabs.org/sources/sucrose/fructose/ or download.sugarlabs.org/sources/honey/,",
            "download.sugarlabs.org/sources/sucrose/fructose/",
            "download.sugarlabs.org/sources/honey/",
            "[ ] check for a release version git tag, e.g. v34,",
            "[ ] correlate with activity_version metadata in activity/activity.info,",
            "activity_version",
            "activity/activity.info",
            "[ ] look for commits after any of these, in either;",
            "bundle_id",
            "[ ] review and merge all pull requests,",
            "[ ] apply all desired commits, making pull requests if review is needed,",
            "[ ] apply any translate.sugarlabs.org changes, e.g. using a download script,",
            "translate.sugarlabs.org",
            "download script",
            "[ ] if there is a po/*.pot file, regenerate using python setup.py genpot, review the changes, and commit,",
            "po/*.pot",
            "python setup.py genpot",
            "[ ] notify our translation-community manager @leonardcj if the POT file changes contain new or changed strings,",
            "[ ] update the README.md file if necessary,",
            "[ ] write release notes for the NEWS file, change the activity_version metadata in activity/activity.info, commit, and git tag the version,",
            "activity_version",
            "activity/activity.info",
            "git tag",
            "[ ] update the activity documentation in the help-activity repository,",
            "[ ] for activities that include a tarball release, or where Fedora or Debian packages may be made, create a tarball using python setup.py dist_source, and upload tarball to download.sugarlabs.org using shell account,",
            "python setup.py dist_source",
            "[ ] create bundle using python setup.py dist_xo, and test that it\ncan be installed by Browse,",
            "python setup.py dist_xo",
            "[ ] for Python 2 branches only, upload to activities.sugarlabs.org\nusing developer account,",
            "[ ] rebase any other maintained branches or pull requests, such as\nthose for past or future versions of Python, or past releases of\nFedora, Ubuntu or libraries.",
            "Modifying Sugar",
            "Sugar repositories can be found in our GitHub sugarlabs\norganization.  Sugar desktop\nenvironment repositories are:",
            "GitHub sugarlabs\norganization",
            "sugarlabs",
            "Workflow",
            "Open an Issue",
            "We track issues in http://bugs.sugarlabs.org/ or in the GitHub Issues tab of repositories.",
            "An improvement to Sugar may start with an issue discussion, to build consensus and ensure that work isn't wasted.  An issue may be avoided for fixing bugs that are obvious to everyone or part of a project.",
            "Forking",
            "You should first fork a repository on GitHub.\nThis step is needed only once.\nSee complete help in GitHub.",
            "complete help in GitHub",
            "Cloning",
            "You should clone your fork.\nThis step is needed only once.\nUsing sugar as example;",
            "sugar",
            "git clone git@github.com:YOUR-NAME/sugar.git\ncd sugar\ngit remote add upstream https://github.com/sugarlabs/sugar.git\ngit fetch upstream\n",
            "Branching",
            "Create a branch per set of changes; e.g. to fix a problem or add a feature;",
            "git checkout -b BRANCH-NAME\n",
            "Your BRANCH-NAME can be anything, other than master.  The scope is your forked repository.  The branch name will be shown on pull-requests.",
            "Making commits",
            "Change files, and commit.  Commit messages are kept by git, and are used later when problems are being solved.  When writing a commit message;",
            "imperative mood",
            "git documentation",
            "blog post by Dan Clarke",
            "Make one or more commits and push the branch to your repository;",
            "git push origin BRANCH-NAME\n",
            "Sending a pull-request",
            "Send a pull-request for your branch.\nNavigate to your repository page in GitHub, switch to the branch you made, and then press the Pull Request button.",
            "When writing a pull-request message;",
            "A review will happen in the pull-request, and a reviewer will either;",
            "When they ask you for changes, you may have to change both files, commits or commit messages.",
            "When squashing commits to different files, use interactive rebase.",
            "git rebase -i master\n",
            "After resolving any conflicts, push the changes to the same branch;",
            "git push --force origin\n",
            "Then respond on the pull-request.",
            "Keep your pull-request up to date",
            "When there have been upstream commits while your pull-request was open, you should rebase your pull-request;",
            "git pull --rebase upstream\n",
            "Then push the changes to the same branch;",
            "git push --force origin\n",
            "The pull-request will be updated.",
            "Keep your fork up to date",
            "When there have been upstream commits since your fork was made, you should bring these into your fork:",
            "git checkout master\ngit pull upstream\ngit checkout BRANCH-NAME\n",
            "Review",
            "We encourage testing before merging a pull-request.",
            "testing",
            'So instead of merging directly with the "merge" button on GitHub, we may do a local merge, then test, then push.',
            "See GitHub help on merging a pull-request.",
            "GitHub help on merging a pull-request",
            "The GitHub page for the pull-request will provide you the right commands to do the local merge, similar to the following.",
            "Get the changes from that branch to a new local branch:",
            "git checkout -b SOME-USER-topic1 master\ngit pull https://github.com/SOME-USER/sugar.git topic1\n",
            "Test! If everything is fine, merge:",
            "Test",
            "git checkout master\ngit rebase SOME-USER-topic1\ngit push origin master\n",
            "Close Issue",
            'Once your pull-request is merged, you should close any issue or ticket.  GitHub issues named as "Fixes" in a commit message may be automatically closed.',
            "Be sure to thank everyone who helped you out along the way.",
            "Testing",
            "When testing activities;",
            "activity must start,",
            "activity must refresh entire display when focus is restored,",
            "activity must behave predictably (except where randomness is designed),",
            "activity must save data to journal,",
            "activity must restore the saved data from journal (click on the journal entry),",
            "other activities must be able to use saved data, if it is declared with the relevant content type,",
            "every coded feature should either work properly, or be removed if it cannot be fixed,",
            "collaboration support, if present, must function properly between two or more systems,",
            "activity should not consume all available battery power (e.g. pygame clock rate too high),",
            "activity should not contain any security vulnerabilities,",
            "activity should not reveal personal information.",
            "Guide for Reviewers",
            "Goals",
            "Goals for review are to;",
            "detect trivial mistakes,",
            "maintain consistent and good code quality,",
            "reproduce test results, (especially for critical repositories),",
            "test",
            "maintain a useful git commit history for use by git bisect, and developers who read it,",
            "maintain other records, such as issues, tickets, and documentation,",
            "not waste the time of the contributor, by doing anything trivial that otherwise the contributor might have to do.",
            "Checklist",
            "[ ] does the change have consensus of the community, see also code of conduct (if a reviewer is in doubt, seek opinions by @mentioning people),",
            "code of conduct",
            "[ ] does the commit message explain the summary, problem, and solution, so that it can be used in future analysis, see also making commits (if a reviewer can fix it by squash or manual rebase, do so),",
            "making commits",
            "[ ] does the commit message reference any issue, bugs.sugarlabs.org ticket number, or downstream ticket numbers, (if a reviewer can fix it by squash or manual rebase, do so),",
            "[ ] are the number of commits excessive for future analysis, (a reviewer may squash or rebase if necessary),",
            "[ ] is the changed code consistent in style with the existing code, see also coding standards, (on the other hand, expect flake8 changes to be in separate commits),",
            "coding standards",
            "[ ] for critical repositories, does the change work properly on our latest version of Sugar on either Fedora, Debian, or Ubuntu.",
            "Critical repositories",
            "sugar, sugar-toolkit, sugar-toolkit-gtk3, sugar-artwork, sugar-datastore, gst-plugins-espeak,",
            "each of the Fructose activity set repositories,",
            "Fructose",
            "Frequently Asked Questions",
            "I've used the GitHub editor, how can I rebase or amend commits?",
            "Make a local clone of your GitHub repository, use git commit --amend or the other advanced CLI features, then git push back to GitHub.",
            "git commit --amend",
            "git push",
            "Error 403 on git push",
            "git push",
            "Most likely you have cloned someone else's repository, and you should\ninstead fork their repository, clone your own repository, make your\nchanges, then push.  See Getting error 403 while submitting\nPR\nand D. Joe's\nreply.",
            "Getting error 403 while submitting\nPR",
            "D. Joe's\nreply",
        ],
    ),
}
